#! /bin/sh
exec huginn --rapid-start -E "${0}" "${@}"
#! huginn

import Algorithms as algo;
import Mathematics as math;
import FileSystem as fs;

class DictionaryNode {
	_finished = false;
	_next = lookup();

	add_suffix( suffix_ ) {
		if ( size( suffix_ ) == 0 ) {
			_finished = true;
		} else {
			char = suffix_[0];
			if ( ! _next.has_key( char ) ) {
				_next[char] = DictionaryNode();
			}
			_next[char].add_suffix( suffix_[1:] );
		}
	}

	get( char_ ) {
		return ( _next.get( char_, none ) );
	}

	print_all( prefix_ = "" ) {
		if ( _finished ) {
			print( prefix_ + "\n" );
		}
		for ( char : _next ) {
			_next[char].print_all( prefix_ + string( char ) );
		}
	}
}

class Cube {
	_letter = none;
	_visited = false;
	_neighbors = [];
	constructor( letter_ ) {
		_letter = letter_;
	}
}

class Board {
	_cubes = none;
	_size = 0;
	constructor( letters_ ) {
		len = integer( math.square_root( real( size( letters_ ) ) ) );
		if ( len * len != size( letters_ ) ) {
			throw Exception( "Bad board definition!" );
		}
		_size = len;
		_cubes = [];
		for ( l : letters_ ) {
			_cubes.push( Cube( l ) );
		}
		deltas = [ ( -1, -1 ), ( -1, 0 ), ( -1, 1 ), ( 0, -1 ), ( 0, 1 ), ( 1, -1 ), ( 1, 0 ), ( 1, 1 ) ];
		for ( x : algo.range( len ) ) {
			for ( y : algo.range( len ) ) {
				for ( d : deltas ) {
					nx = x + d[0];
					ny = y + d[1];
					if ( ( nx >= 0 ) && ( nx < len ) && ( ny >= 0 ) && ( ny < len ) ) {
						get_cube( x, y )._neighbors.push( observe( get_cube( nx, ny ) ) );
					}
				}
			}
		}
	}

	get_cube( x_, y_ ) {
		return ( _cubes[y_ * _size + x_] );
	}

	solve( dictionary_ ) {
		result = set();
		for ( cube : _cubes ) {
			solve_recursive( result, "", cube, dictionary_ );
		}
		return ( algo.sorted( result, size ) );
	}

	solve_recursive( result, prefix_, cube_, dictNode_ ) {
		nextNode = dictNode_.get( cube_._letter );
		if ( nextNode == none ) {
			return;
		}
		cube_._visited = true;
		newPrefix = prefix_ + string( cube_._letter );
		if ( nextNode._finished && ( size( newPrefix ) >= 3 ) ) {
			result.insert( newPrefix );
		}
		for ( n : cube_._neighbors ) {
			neighbor = use( n );
			if ( ! neighbor._visited ) {
				solve_recursive( result, newPrefix, neighbor, nextNode );
			}
		}
		cube_._visited = false;
	}
}

main( argv_ ) {
	dictionaryRoot = DictionaryNode();
	dictFile = fs.open( argv_[1], fs.reading() );
	for ( line : dictFile ) {
		dictionaryRoot.add_suffix( line.strip() );
	}
//	dictionaryRoot.print_all();
	print( "[ OK ] Ready\n" );
	letters = "";
	while ( ( line = input() ) != none ) {
		line = line.strip();
		if ( ( size( letters ) > 0 ) && ( size( line ) == 0 ) ) {
			print( "[ OK ] Solving\n" );
			try {
				board = Board( letters );
				for ( word : board.solve( dictionaryRoot ) ) {
					print( "(" + string( size( word ) ) + ") " + word + "\n" );
				}
				print( "[ OK ] Solved\n" );
			} catch ( Exception e ) {
				print( e.message() + "\n" );
			}
			letters = "";
		} else {
			letters += line;
		}
	}
	return ( 0 );
}

/* vim: set ft=huginn: */
